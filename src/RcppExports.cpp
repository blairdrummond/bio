// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "scbursts_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// cpp_hjcfit_likelihood_maximize
Eigen::MatrixXd cpp_hjcfit_likelihood_maximize(Eigen::MatrixXd qmatrix, int nopen, DCProgs::t_Bursts bursts, DCProgs::t_real tau, DCProgs::t_uint nmax, DCProgs::t_real xtol, DCProgs::t_real rtol, DCProgs::t_uint itermax);
RcppExport SEXP _scbursts_cpp_hjcfit_likelihood_maximize(SEXP qmatrixSEXP, SEXP nopenSEXP, SEXP burstsSEXP, SEXP tauSEXP, SEXP nmaxSEXP, SEXP xtolSEXP, SEXP rtolSEXP, SEXP itermaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type qmatrix(qmatrixSEXP);
    Rcpp::traits::input_parameter< int >::type nopen(nopenSEXP);
    Rcpp::traits::input_parameter< DCProgs::t_Bursts >::type bursts(burstsSEXP);
    Rcpp::traits::input_parameter< DCProgs::t_real >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< DCProgs::t_uint >::type nmax(nmaxSEXP);
    Rcpp::traits::input_parameter< DCProgs::t_real >::type xtol(xtolSEXP);
    Rcpp::traits::input_parameter< DCProgs::t_real >::type rtol(rtolSEXP);
    Rcpp::traits::input_parameter< DCProgs::t_uint >::type itermax(itermaxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_hjcfit_likelihood_maximize(qmatrix, nopen, bursts, tau, nmax, xtol, rtol, itermax));
    return rcpp_result_gen;
END_RCPP
}
// cpp_hjcfit_likelihood
DCProgs::t_real cpp_hjcfit_likelihood(Eigen::MatrixXd qmatrix, int nopen, DCProgs::t_Bursts bursts, DCProgs::t_real tau, DCProgs::t_uint nmax, DCProgs::t_real xtol, DCProgs::t_real rtol, DCProgs::t_uint itermax);
RcppExport SEXP _scbursts_cpp_hjcfit_likelihood(SEXP qmatrixSEXP, SEXP nopenSEXP, SEXP burstsSEXP, SEXP tauSEXP, SEXP nmaxSEXP, SEXP xtolSEXP, SEXP rtolSEXP, SEXP itermaxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd >::type qmatrix(qmatrixSEXP);
    Rcpp::traits::input_parameter< int >::type nopen(nopenSEXP);
    Rcpp::traits::input_parameter< DCProgs::t_Bursts >::type bursts(burstsSEXP);
    Rcpp::traits::input_parameter< DCProgs::t_real >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< DCProgs::t_uint >::type nmax(nmaxSEXP);
    Rcpp::traits::input_parameter< DCProgs::t_real >::type xtol(xtolSEXP);
    Rcpp::traits::input_parameter< DCProgs::t_real >::type rtol(rtolSEXP);
    Rcpp::traits::input_parameter< DCProgs::t_uint >::type itermax(itermaxSEXP);
    rcpp_result_gen = Rcpp::wrap(cpp_hjcfit_likelihood(qmatrix, nopen, bursts, tau, nmax, xtol, rtol, itermax));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_scbursts_cpp_hjcfit_likelihood_maximize", (DL_FUNC) &_scbursts_cpp_hjcfit_likelihood_maximize, 8},
    {"_scbursts_cpp_hjcfit_likelihood", (DL_FUNC) &_scbursts_cpp_hjcfit_likelihood, 8},
    {NULL, NULL, 0}
};

RcppExport void R_init_scbursts(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
